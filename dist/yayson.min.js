/*! yayson v 3.0.0 (https://github.com/confetti/yayson) by Johannes Edelstam <johannes@edelst.am>, Jonny Str√∂mberg <jonny.stromberg@gmail.com> */
var yayson;!function(){var t={196:function(t,e,n){const s=n(376),i=n(142),r=n(716),o=n(757),l=function(t){return"default"===t?s:i[t]||t||s};t.exports=function(){let{adapter:t}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const e=l(t),n=r(l(e)),i=o();return{Store:i,Presenter:n,Adapter:s}}},376:function(t){t.exports=class{static get(t,e){return e?t[e]:t}static id(t){const e=this.get(t,"id");return void 0===e?e:`${e}`}}},142:function(t,e,n){t.exports={sequelize:n(583)}},583:function(t,e,n){const s=n(376);t.exports=class extends s{static get(t,e){if(null!=t)return t.get(e)}}},716:function(t){function e(t,e,n){return(e=function(t){var e=function(t,e){if("object"!=typeof t||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var s=n.call(t,e||"default");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==typeof e?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}t.exports=function(t){var n;const s=function(t){if(null!=t)return null!=t.self||null!=t.related?t:{self:t}};return n=class{constructor(t){null==t&&(t={}),this.scope=t}id(t){return this.constructor.adapter.id(t)}selfLinks(t){}links(){}relationships(){}attributes(t){if(null==t)return null;const e={...this.constructor.adapter.get(t)};delete e.id;const n=this.relationships();for(let t in n)delete e[t];return e}includeRelationships(t,e){const n=this.relationships(),s=[];for(var i in n){const r=n[i];if(!r)throw new Error(`Presenter for ${i} in ${this.constructor.type} is not defined`);const o=new r(t),l=this.constructor.adapter.get(e,i);s.push(o.toJSON(l,{include:!0}))}return s}buildRelationships(t){if(null==t)return null;const e=this.relationships(),n=this.links(t)||{};let i=null;for(var r in e){let u=this.constructor.adapter.get(t,r);var o=e[r],l=t=>u={id:this.constructor.adapter.id(t),type:o.type};const c=t=>{const e={};return null!=t&&(e.data=l(t)),null!=n[r]?e.links=s(n[r]):null==t&&(e.data=null),e};i||(i={}),i[r]||(i[r]={}),u instanceof Array?(i[r].data=u.map(l),null!=n[r]&&(i[r].links=s(n[r]))):i[r]=c(u)}return i}buildSelfLink(t){return s(this.selfLinks(t))}toJSON(t,e){if(null==e&&(e={}),null!=e.meta&&(this.scope.meta=e.meta),null!=e.links&&(this.scope.links=e.links),this.scope.data||(this.scope.data=null),null==t)return this.scope;if(t instanceof Array){const n=t;this.scope.data||(this.scope.data=[]),n.forEach((t=>this.toJSON(t,e)))}else{const n=t;let s=!0;const i={id:this.id(n),type:this.constructor.type,attributes:this.attributes(n)};void 0===i.id&&delete i.id;const r=this.buildRelationships(n);null!=r&&(i.relationships=r);const o=this.buildSelfLink(n);null!=o&&(i.links=o),e.include?(this.scope.included||(this.scope.included=[]),this.scope.included.concat(this.scope.data).some((t=>t.id===i.id&&t.type===i.type))?s=!1:this.scope.included.push(i)):null!=this.scope.data?this.scope.data instanceof Array&&this.scope.data.some((t=>t.id===i.id))?s=!1:this.scope.data.push(i):this.scope.data=i,s&&this.includeRelationships(this.scope,n)}return this.scope}render(t,e){return this.toJSON(t,e)}static toJSON(){return(new this).toJSON(...arguments)}static render(){return(new this).render(...arguments)}},e(n,"adapter",t),e(n,"type","objects"),n}},757:function(t){t.exports=function(){class t{constructor(t){({id:this.id,type:this.type,attributes:this.attributes,relationships:this.relationships,links:this.links,meta:this.meta}=t)}}return class{constructor(t){this.reset()}reset(){this.records=[]}toModel(t,e,n){let s;const i={...t.attributes||{}};if(i.type&&(s=i.type),i.id=t.id,i.type=t.type,n[e]||(n[e]={}),n[e][t.id]||(n[e][t.id]=i),Object.prototype.hasOwnProperty.call(i,"meta")&&(i.attributes={meta:i.meta},delete i.meta),null!=t.meta&&(i.meta=t.meta),null!=t.links&&(i.links=t.links),null!=t.relationships)for(let e in t.relationships){const s=t.relationships[e],{data:r}=s,{links:o}=s,{meta:l}=s;if(i[e]=null,null==r&&null==o)continue;const u=t=>{let{type:e,id:s}=t;return this.find(e,s,n)};i[e]=r instanceof Array?r.map(u):null!=r?u(r):{};const c=i[e];null!=c&&(c._links=o||{},c._meta=l||{})}return s&&(i.type=s),i}findRecord(t,e){return this.records.find((n=>n.type===t&&n.id===e))}findRecords(t){return this.records.filter((e=>e.type===t))}find(t,e,n){null==n&&(n={});const s=this.findRecord(t,e);return null==s?null:(n[t]||(n[t]={}),n[t][e]||this.toModel(s,t,n))}findAll(t,e){null==e&&(e={});const n=this.findRecords(t);return null==n?[]:(n.forEach((n=>(e[t]||(e[t]={}),this.toModel(n,t,e)))),Object.values(e[t]||{}))}remove(t,e){const n=t=>{const e=this.records.indexOf(t);if(!(e<0))return this.records.splice(e,1)};if(null!=e)return n(this.findRecord(t,e));return this.findRecords(t).map(n)}sync(e){const n=e=>{if(null==e)return null;const n=e=>{const{type:n,id:s}=e;this.remove(n,s);const i=new t(e);return this.records.push(i),i};return e instanceof Array?e.map(n):n(e)};n(e.included);const s=n(e.data);if(null==s)return null;const i={};let r=null;return r=s instanceof Array?s.map((t=>this.toModel(t,t.type,i))):this.toModel(s,s.type,i),Object.prototype.hasOwnProperty.call(e,"links")&&(r.links=e.links),Object.prototype.hasOwnProperty.call(e,"meta")&&(r.meta=e.meta),r}}}}},e={};var n=function n(s){var i=e[s];if(void 0!==i)return i.exports;var r=e[s]={exports:{}};return t[s](r,r.exports,n),r.exports}(196);yayson=n}();